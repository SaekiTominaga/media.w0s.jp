/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HTTP = number;
export type NoName1 = string;
/**
 * Determines how dotfiles (files or directories that begin with a dot “.”) are treated.
 */
export type Dotfiles = number;
/**
 * Enable or disable etag generation
 */
export type Etag = boolean;
/**
 * Sets file extension fallbacks: If a file is not found, search for files with the specified extensions and serve the first one found. Example: ['html', 'htm'].
 */
export type Extensions = string[];
/**
 * Let client errors fall-through as unhandled requests, otherwise forward a client error.
 */
export type Fallthrough = boolean;
/**
 * Enable or disable the immutable directive in the Cache-Control response header. If enabled, the maxAge option should also be specified to enable caching. The immutable directive will prevent supported clients from making conditional requests during the life of the maxAge option to check if the file has changed.
 */
export type Immutable = boolean;
/**
 * Sends the specified directory index file. Set to false to disable directory indexing.
 */
export type Index = string[];
/**
 * Set the Last-Modified header to the last modified date of the file on the OS.
 */
export type LastModified = boolean;
/**
 * Set the max-age property of the Cache-Control header in milliseconds or a string in ms format.
 */
export type MaxAge = string;
/**
 * Redirect to trailing “/” when the pathname is a directory.
 */
export type Redirect = boolean;
export type StrictTransportSecurity = string;
export type ContentSecurityPolicyHTML = string;
export type ContentSecurityPolicyHTML1 = string;
export type Threshold = string;
export type Filepath403Forbidden = string;
export type Filepath404NotFound = string;
export type NoName8 = string;
export type NoName9 = string;
export type NoName12 = number;
export type NoName13 = number;
export type URL = string[];

export interface MediaW0SJp {
  port: HTTP;
  static: NoName;
  response: NoName3;
  errorpage: NoName6;
  thumb_image: NoName7;
}
export interface NoName {
  root: NoName1;
  options: NoName2;
}
/**
 * https://expressjs.com/ja/4x/api.html#express.static
 */
export interface NoName2 {
  dotfiles?: Dotfiles;
  etag?: Etag;
  extensions?: Extensions;
  fallthrough?: Fallthrough;
  immutable?: Immutable;
  index?: Index;
  last_modified?: LastModified;
  max_age?: MaxAge;
  redirect?: Redirect;
  set_headers?: SetHeaders;
}
/**
 * Function for setting HTTP headers to serve with the file.
 */
export interface SetHeaders {
  [k: string]: unknown;
}
export interface NoName3 {
  mime: MIME;
  header: NoName4;
  compression: NoName5;
}
export interface MIME {
  [k: string]: unknown;
}
export interface NoName4 {
  hsts: StrictTransportSecurity;
  csp: ContentSecurityPolicyHTML;
  csp_html: ContentSecurityPolicyHTML1;
}
export interface NoName5 {
  threshold: Threshold;
}
export interface NoName6 {
  path403: Filepath403Forbidden;
  path404: Filepath404NotFound;
}
export interface NoName7 {
  orig_dir: NoName8;
  thumb_dir: NoName9;
  extension: NoName10;
  param: NoName11;
  referrer_check_exclusion_urls?: URL;
}
export interface NoName10 {
  [k: string]: unknown;
}
export interface NoName11 {
  max_width: NoName12;
  max_height: NoName13;
}
